"use strict";const fs=require("fs"),path=require("path"),gzipSize=require("gzip-size"),{parseChunked}=require("@discoveryjs/json-ext"),Logger=require("./Logger"),Folder=require("./tree/Folder").default,{parseBundle}=require("./parseUtils"),{createAssetsFilter}=require("./utils"),FILENAME_QUERY_REGEXP=/\?.*$/u,FILENAME_EXTENSIONS=/\.(js|mjs|cjs)$/iu;module.exports={getViewerData,readStatsFromFile};function getViewerData(e,n,i){const{logger:t=new Logger,excludeAssets:l=null}=i||{},g=createAssetsFilter(l);if((e.assets==null||e.assets.length===0)&&e.children&&e.children.length>0){const{children:s}=e;e=e.children[0];for(let r=1;r<s.length;r++)s[r].assets.forEach(o=>{o.isChild=!0,e.assets.push(o)})}else e.children&&e.children.length>0&&e.children.forEach(s=>{s.assets.forEach(r=>{r.isChild=!0,e.assets.push(r)})});e.assets=e.assets.filter(s=>s.type&&s.type!=="asset"?!1:(s.name=s.name.replace(FILENAME_QUERY_REGEXP,""),FILENAME_EXTENSIONS.test(s.name)&&s.chunks.length>0&&g(s.name)));let a=null,f=null;if(n){a={},f={};for(const s of e.assets){const r=path.join(n,s.name);let o;try{o=parseBundle(r)}catch(h){const d=h.code==="ENOENT"?"no such file":h.message;t.warn(`Error parsing bundle asset "${r}": ${d}`);continue}a[s.name]={src:o.src,runtimeSrc:o.runtimeSrc},Object.assign(f,o.modules)}Object.keys(a).length===0&&(a=null,f=null,t.warn(`
No bundles were parsed. Analyzer will show only original module sizes from stats file.
`))}const y=e.assets.reduce((s,r)=>{const o=r.isChild?getChildAssetBundles(e,r.name):e,h=o?getBundleModules(o):[],d=s[r.name]={size:r.size},m=a&&Object.prototype.hasOwnProperty.call(a,r.name)?a[r.name]:null;m&&(d.parsedSize=Buffer.byteLength(m.src),d.gzipSize=gzipSize.sync(m.src));let p=h.filter(u=>assetHasModule(r,u));if(f){const u=[];for(const c of p)f[c.id]?c.parsedSrc=f[c.id]:isEntryModule(c)&&u.push(c);u.length&&m&&(u.length===1?u[0].parsedSrc=m.runtimeSrc:(p=p.filter(c=>!u.includes(c)),p.unshift({identifier:"./entry modules",name:"./entry modules",modules:u,size:u.reduce((c,E)=>c+E.size,0),parsedSrc:m.runtimeSrc})))}return d.modules=p,d.tree=createModulesTree(d.modules),s},{}),z=getChunkToInitialByEntrypoint(e);return Object.entries(y).map(([s,r])=>{var o;return{label:s,isAsset:!0,statSize:r.tree.size||r.size,parsedSize:r.parsedSize,gzipSize:r.gzipSize,groups:Object.values(r.tree.children).map(h=>h.toChartData()),isInitialByEntrypoint:(o=z[s])!==null&&o!==void 0?o:{}}})}function readStatsFromFile(e){return parseChunked(fs.createReadStream(e,{encoding:"utf8"}))}function getChildAssetBundles(e,n){return flatten((e.children||[]).find(i=>Object.values(i.assetsByChunkName))).includes(n)}function getBundleModules(e){var n;const i=new Set;return flatten((((n=e.chunks)===null||n===void 0?void 0:n.map(t=>t.modules))||[]).concat(e.modules).filter(Boolean)).filter(t=>isRuntimeModule(t)||i.has(t.id)?!1:(i.add(t.id),!0))}function assetHasModule(e,n){return(n.chunks||[]).some(i=>e.chunks.includes(i))}function isEntryModule(e){return e.depth===0}function isRuntimeModule(e){return e.moduleType==="runtime"}function createModulesTree(e){const n=new Folder(".");return e.forEach(i=>n.addModule(i)),n.mergeNestedFolders(),n}function getChunkToInitialByEntrypoint(e){if(e==null)return{};const n={};return Object.values(e.entrypoints||{}).forEach(i=>{for(const l of i.assets){var t;n[l.name]=(t=n[l.name])!==null&&t!==void 0?t:{},n[l.name][i.name]=!0}}),n}function flatten(e){if(!e)return[];const n=e.length;if(!n)return[];let i;const t=[];for(let l=0;l<n;l++)i=e[l],Array.isArray(i)?t.push(...i):t.push(i);return t}
